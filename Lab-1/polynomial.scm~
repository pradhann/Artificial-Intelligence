#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.10 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 64 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 119 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 204 221 170 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 119 34 119 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 144 179 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 204 204 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 6 #"Menlo\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1           0 1076 9          49 21           0 0           0 7 0
14 3 3 #"Lab"
0 0 24 3 1 #" "
0 0 14 3 2 #"1:"
0 0 24 3 1 #" "
0 0 14 3 9 #"Recalling"
0 0 24 3 1 #" "
0 0 14 3 6 #"Scheme"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   left-section"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;   proc, a binary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;;   left, the first argument for proc"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;   Produce a function that takes the second argument for proc"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;;   procL, a function that takes the second argument for (proc lef"
 #"t right)"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;    procL takes one parameter (right) that serves as the second a"
 #"rgument in"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;     (proc left right)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"left-section"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   right-section"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;   proc, a binary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;   right, the second argument for proc"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;   Produce a function that takes the first argument for proc"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;   procR, a function that takes the first argument for (proc left"
 #" right)"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;;    procR takes one parameter (left) that serves as the first arg"
 #"ument in"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;     (proc left right)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"right-section"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   dot-product"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   v1, v2, list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 68
#";;;   Calculates the dot prodcut of vectors represented by v1 and v2"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   num, a number"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;;   v1 and v2 are of the same length"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;    num is the sum of the product of corresponding elements in v1"
 #" and v2"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"dot-product"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 2 #"v1"
0 0 24 3 1 #" "
0 0 14 3 2 #"v2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;   iota"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;   num, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";;;   Produce a list of numbers from 0 till num - 1"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   lst, a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;;   lst = '(1, 2, ..., num -1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"iota"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 9 #"negative?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"num should be a positive integer\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 11 #"iota-helper"
0 0 24 3 3 #" (["
0 0 14 3 6 #"so-far"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ["
0 0 14 3 9 #"remaining"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 6 #"so-far"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"iota-helper"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 2 #") "
0 0 14 3 6 #"so-far"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 9 #"remaining"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   polynomial-term"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;  c, a number"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;  n, a number"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;   Produce a unary function with c as the coefficeint and n as th"
 #"e exponent"
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   f, a function"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;   f(x) = c.x^n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"polynomial-term"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   polynomial"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;  coeffs, a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;   Produce a unary function with the numbers in coeffs as the"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";;;    coefficeints "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 3 #"x^0"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 20 #"x^1,... respectively"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;   f, a function"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;   Let c_i be the ith term of coeffs and n be the length of coeff"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;   f(x) = c_0.x^0 + c_1.x^1 + c_2.x^2 + .... c_(n-1).x^(n-1)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"polynomial"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"coeffs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"fun-list"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 15 #"polynomial-term"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iota"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 7 #"fun-map"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-list"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   fun-map"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";;;  x, expression "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;  fun-list, a list of unary functions"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;  For all functions in"
0 0 17 3 48 #" fun-list evaluate the value when the input is x"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;;    and return a list of these values"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   reslut, a list of expressions"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;   Each function in fun-list should accept x as a valid input"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"fun-map"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 8 #"fun-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 8 #"fun-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;   polynomial-derivative-coeffs"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 80
(
 #";;;  coeffs, a list of numbers that represents a list of polynomial "
 #"coefficients"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;    Return a list of coefficients of the derivative of the polyno"
 #"mial"
) 0 0 24 29 1 #"\n"
0 0 17 3 31 #";;;      represented by coeffs "
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   lst, a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";;;   coeffs should be a non-empty list"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 69
(
 #";;;   Let c_i be the ith term of coeffs and n be the length of coeff"
 #"s"
) 0 0 24 29 1 #"\n"
0 0 17 3 56 #";;;   The polynomial represented by coeffs is defined as"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;;   c_0.x^0"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 7 #"c_1.x^1"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 7 #"c_2.x^2"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 4 #"...."
0 0 17 3 1 #" "
0 0 17 3 2 #"c_"
0 0 17 3 1 #"("
0 0 17 3 3 #"n-1"
0 0 17 3 4 #").x^"
0 0 17 3 22 #"(n-1). lst is the list"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";;;   of coefficents of the derivative of this polynomial."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 28 #"polynomial-derivative-coeffs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"coeffs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iota"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";;;   nest"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;  f, a unary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";;;  n, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;    Return a function obtained from composing f with itself"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;      n times"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   fun, a unary function"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;   Let f^n(x) be the function obtained from composing f with itse"
 #"lf n times"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;     fun(x) = f^n(x)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"nest"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"n must be a positive integer\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 9 #"negative?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"n"
0 0 19 3 1 #" "
0 0 19 3 6 #"cannot"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"negative"
0 0 19 3 8 #" number\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"n"
0 0 19 3 1 #" "
0 0 19 3 4 #"must"
0 0 19 3 1 #" "
0 0 19 3 2 #"be"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 8 #"positive"
0 0 19 3 9 #" integer\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"nest-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";;;   nest-helper"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;;  f, a unary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;  f-cum, a unary procedure"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";;;  n, a non-negative integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";;;    A helper procedure for nest that calls itself recursively unt"
 #"il n is"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";;;     zero; It passes f-cum as the cummulative function resuling f"
 #"rom composing f  "
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   fun, a unary function"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";;;   Let f^n(x) be the function obtained from composing f with itse"
 #"lf n times"
) 0 0 24 29 1 #"\n"
0 0 17 3 23 #";;;     fun(x) = f^n(x)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"nest-helper"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 5 #"f-cum"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 5 #"f-cum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"nest-helper"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 1 #"f"
0 0 24 3 2 #" ("
0 0 14 3 5 #"f-cum"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";;;   polynomial-deriv"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;;   coeffs, a list of polynomial coeffs"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   n, a positive integer"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 72
(
 #";;;  Returns a procedure that takes a single value and evaluates the"
 #" nth"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";;;   derivative"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 10 #"polynomial"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 1 #" "
0 0 17 3 12 #"coefficients"
0 0 17 3 1 #" "
0 0 17 3 2 #"at"
0 0 17 3 11 #" that value"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";;;   fun, a unary function that evaluates the nth derivative"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 11 #" polynomial"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";;;     represented by coeffs"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"polynomial-deriv"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"coeffs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"polynomial"
0 0 24 3 3 #" (("
0 0 14 3 4 #"nest"
0 0 24 3 1 #" "
0 0 14 3 28 #"polynomial-derivative-coeffs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #") "
0 0 14 3 6 #"coeffs"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          25 21           0 0           0 3 0 14 3 7 #"Problem"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";;;   non-zero-coefficients"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";;;   coeffs, a list of polynomial coeffs for the terms x0, x1, x2, "
 #"... of a"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #";;;     polynomial"
0 0 17 3 1 #" "
0 0 17 3 4 #"with"
0 0 17 3 1 #" "
0 0 17 3 5 #"terms"
0 0 17 3 1 #" "
0 0 17 3 2 #"cn"
0 0 17 3 1 #" "
0 0 17 3 5 #"\302\267 xn"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;  Produces the values of n (in ascending order) for which cn \314"
 #"\270= 0."
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";;;   lst, a list of of numbers when interpreted as indices for"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;     coeffs "
0 0 17 3 5 #"gives"
0 0 17 3 1 #" "
0 0 17 3 3 #"all"
0 0 17 3 21 #" the non-zero values "
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Preconditions:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";;; Postcondition:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";;;   [No additional]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"non-zero-coefficients"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"coeffs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 28 #"non-zero-coefficients-helper"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"iota"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"coeffs"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";;; Procedure:"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";;;   non-zero-coefficients-helper"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;; Parameters:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";;;   lst, a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";;;   index-list, a list of numbers"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Purpose:"
0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;;  Produces the values of n (in ascending order) for which cn \314"
 #"\270= 0."
) 0 0 24 29 1 #"\n"
0 0 17 3 13 #";;; Produces:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;;   l1, a list of of numbers when interpreted as indices for"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;;     coeffs "
0 0 17 3 5 #"gives"
0 0 17 3 1 #" "
0 0 17 3 24 #"all the non-zero values "
0 0 24 29 1 #"\n"
0 0 17 3 12 #";;; Process:"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;;   (iota (length coeffs)) is iniitially passed as index-list,"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";;;   the"
0 0 17 3 2 #" ("
0 0 17 3 3 #"crd"
0 0 17 3 60
#" index-list) is passed with every recursive call to serve as"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";;;   index-list for subsequent non-zero values"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 28 #"non-zero-coefficients-helper"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lst"
0 0 24 3 1 #" "
0 0 14 3 10 #"index-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"zero?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 28 #"non-zero-coefficients-helper"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"index-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 10 #"index-list"
0 0 24 3 3 #") ("
0 0 14 3 28 #"non-zero-coefficients-helper"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 10 #"index-list"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
